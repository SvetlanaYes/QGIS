# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ServerDataBaseConnection
                                 A QGIS plugin
 Server and Database connection
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-04-30
        git sha              : $Format:%H$
        copyright            : (C) 2024 by cast
        email                : cast@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
import psycopg2
import json

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ServerDataBaseConnection_dialog import ServerDataBaseConnectionDialog
import os.path
from PyQt5.QtWidgets import QDialog, QVBoxLayout, QLabel, QLineEdit, QPushButton
import socket
import helpers
from helpers import read_json, write_to_json, show_warning_message


database_path = helpers.get_dataset_path()
server_path = helpers.get_server_path()
config_path = helpers.get_config_path()


def create_db_path(filename):
    config_data = {
        "dbname": "",
        "user": "",
        "password": "",
        "host": "",
        "port": ""
    }
    with open(filename, 'w') as file:
        json.dump(config_data, file)


def create_server_path(filename):
    config_data = {
        "SERVER_HOST": "",
        "SERVER_PORT": ""
    }
    with open(filename, 'w') as file:
        json.dump(config_data, file)


def set_db_connection(database_data):
    try:
        conn = psycopg2.connect(database=database_data["dbname"], user=database_data["user"],
                                password=database_data["password"], host=database_data["host"],
                                port=database_data["port"])
        cursor = conn.cursor()
    except psycopg2.Error as e:
        return e
    return cursor, conn


def set_server_connection(server_data):
    try:
       client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
       client_socket.connect((server_data["SERVER_HOST"], int(server_data["SERVER_PORT"])))
    except Exception as e:
       return e
    return client_socket


class AddServerInfo(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('Server Info')
        self.initUI()

    def initUI(self):

        layout = QVBoxLayout()
        self.server_host_label = QLabel('Enter SERVER_HOST:')
        self.server_host_input = QLineEdit()

        layout.addWidget(self.server_host_label)
        layout.addWidget(self.server_host_input)

        self.server_port_label = QLabel('Enter SERVER_PORT:')
        self.server_port_input = QLineEdit()

        layout.addWidget(self.server_port_label)
        layout.addWidget(self.server_port_input)
        self.submit_button = QPushButton('Submit')
        self.submit_button.clicked.connect(self.submitInfo)
        layout.addWidget(self.submit_button)

        self.setLayout(layout)
        if os.path.exists(server_path):
            data = read_json(server_path)
            self.populate_inputs(data)

    def populate_inputs(self, data):
        self.server_host_input.setText(data.get("SERVER_HOST", "Enter SERVER_HOST"))
        self.server_port_input.setText(data.get("SERVER_PORT", "Enter SERVER_PORT"))

    def submitInfo(self):
        SERVER_HOST = self.server_host_input.text()
        SERVER_PORT = self.server_port_input.text()
        config_data = {
            "SERVER_HOST": SERVER_HOST,
            "SERVER_PORT": SERVER_PORT
        }
        if SERVER_HOST == "":
            show_warning_message("Enter Server Host name")
            return
        if SERVER_PORT == "":
            show_warning_message("Enter Server Port name")
            return
        write_to_json(server_path, config_data)
        print("Configuration saved to", server_path)
        self.accept()


class AddDatabaseInfo(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle('DataBase Info')
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        self.dbname_label = QLabel('Enter dbname:')
        self.dbname_input = QLineEdit()
        layout.addWidget(self.dbname_label)
        layout.addWidget(self.dbname_input)

        self.user_label = QLabel('Enter user:')
        self.user_input = QLineEdit()
        layout.addWidget(self.user_label)
        layout.addWidget(self.user_input)

        self.password_label = QLabel('Enter password:')
        self.password_input = QLineEdit()
        layout.addWidget(self.password_label)
        layout.addWidget(self.password_input)

        self.host_label = QLabel('Enter host:')
        self.host_input = QLineEdit()
        layout.addWidget(self.host_label)
        layout.addWidget(self.host_input)

        self.port_label = QLabel('Enter port:')
        self.port_input = QLineEdit()
        layout.addWidget(self.port_label)
        layout.addWidget(self.port_input)

        self.submit_button = QPushButton('Submit')
        self.submit_button.clicked.connect(self.submitInfo)
        layout.addWidget(self.submit_button)

        self.setLayout(layout)
        if os.path.exists(database_path):
            print(database_path)
            data = read_json(database_path)
            self.populate_inputs(data)

    def populate_inputs(self, data):
        print(data)
        self.dbname_input.setText(data.get("dbname", "Enter Data"))
        self.user_input.setText(data.get("user", "Enter Data"))
        self.password_input.setText(data.get("password", "Enter Data"))
        self.host_input.setText(data.get("host", "Enter Data"))
        self.port_input.setText(data.get("port", "Enter Data"))

    def submitInfo(self):
        dbname = self.dbname_input.text()
        user = self.user_input.text()
        password = self.password_input.text()
        host = self.host_input.text()
        port = self.port_input.text()

        config_data = {
            "dbname": dbname,
            "user": user,
            "password": password,
            "host": host,
            "port": port
        }
        connection_result = set_db_connection(config_data)

        if isinstance(connection_result, psycopg2.OperationalError):
            show_warning_message(connection_result)
            return
        else:
            cursor, conn = connection_result
            cursor.close()
            conn.close()
        write_to_json(database_path, config_data)
        self.accept()


class ServerDataBaseConnection:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ServerDataBaseConnection_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Server and Database connection')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ServerDataBaseConnection', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ServerDataBaseConnection/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ServerDataBaseConnection'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Server and Database connection'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started

        self.dlg = ServerDataBaseConnectionDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        self.dlg.ChangeSetDB.clicked.connect(self.open_add_db_info_dialog)
        self.dlg.ChangeSetServer.clicked.connect(self.open_add_server_info_dialog)

    def open_add_db_info_dialog(self):
        self.add_db_info_dialog = AddDatabaseInfo()
        if self.add_db_info_dialog.exec_() == QDialog.Accepted:
            print("done")

    def open_add_server_info_dialog(self):
        self.add_server_info_dialog = AddServerInfo()
        if self.add_server_info_dialog.exec_() == QDialog.Accepted:
            print("done")