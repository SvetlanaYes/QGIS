# -*- coding: utf-8 -*-
"""
/***************************************************************************
 changedetectionDialog
                                 A QGIS plugin
 Algorithm gets 2 folders with images, each image pair should have the same name, does change detection on them and returns change map
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-02-19
        git sha              : $Format:%H$
        copyright            : (C) 2024 by CAST
        email                : yesayan.svetlana@student.rau.am
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import shutil
from .changesystem import main
import PyQt5
import json
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QMessageBox, QProgressDialog
from PyQt5.QtWidgets import QTextEdit
from qgis.core import QgsProject, QgsRasterLayer, QgsMapLayer, QgsVectorFileWriter, QgsRasterFileWriter, QgsRasterPipe
from .changesystem.helpers.constants import PROJECT_CONFIGS
from datetime import datetime
from qgis.core import QgsApplication
from qgis.utils import iface

try:
    from qgis.PyQt import uic
    from qgis.PyQt import QtWidgets

    print("QGIS modules imported successfully")
except Exception as e:
    print(f"Error importing QGIS modules: {e}")

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ChangeDetection_dialog_base.ui'))


class WorkerThread(QThread):

    def __init__(self,  output_dir="", method="Resize", model="BIT", project=None, parent=None):
        super(WorkerThread, self).__init__(parent)
        self.output_dir = output_dir
        self.method = method
        self.model = model
        self.project = project

    def run(self):
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print("start Time =", current_time)
        print(self.output_dir)
        main.main(self.output_dir, self.method, self.model, self.project)


class changedetectionDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super(changedetectionDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.worker_thread = None
        self.OK.clicked.connect(self.start_worker_thread)

    def valid_layers(self, layers):
        if len(layers) != 2:
            return False
        for layer in layers:
            if layer.type() != QgsMapLayer.RasterLayer:
                return False
        return True

    def determine_method(self):
        if self.SlidingWindowAverage.isChecked():
            return "SlidingWindowAverage"
        elif self.Crop.isChecked():
            return "Crop"
        else:
            return "Resize"

    def determine_model(self):
        return "ChangeFormer" if self.ChangeFormer.isChecked() else "BIT"

    def initialize_worker_thread(self, output_dir, method, model, layers):
        self.worker_thread = WorkerThread(output_dir=output_dir, method=method, model=model, project=layers)
        self.worker_thread.finished.connect(self.on_worker_finished)
        self.worker_thread.start()

    def start_worker_thread(self):
        if not self.valid_layers(iface.mapCanvas().layers()):
            self.finish_with_input_error()
            return

        output_dir = self.output.text()
        method = self.determine_method()
        model = self.determine_model()
        self.initialize_worker_thread(output_dir, method, model, iface.mapCanvas().layers())

    def finish_with_input_error(self):
        QMessageBox.information(self, "Error", "Add 2 raster layers for changedetection")

    def on_worker_finished(self):
        print("Worker thread finished")
        now = datetime.now()
        current_time = now.strftime("%H:%M:%S")
        print("finish Time =", current_time)
        QMessageBox.information(self, "Done", "Processing is complete.")
        with open(PROJECT_CONFIGS, 'r') as file:
            CONFIG = json.load(file)
        result_dir = os.path.join(CONFIG['results_dir'], CONFIG['MODELS'][0],  CONFIG['METHODS'][0], CONFIG['data_name'])
        image_files = [f for f in os.listdir(result_dir) if
                       f.lower().endswith(('.tif', '.tiff', '.jpg', '.JPG', ".png", ".PNG"))]
        for image_file in image_files:
            image_path = os.path.join(result_dir, image_file)
            layer_name = os.path.splitext(image_file)[0]
            raster_layer = QgsRasterLayer(image_path, layer_name)
            QgsProject.instance().addMapLayer(raster_layer)

        QMessageBox.information(self, "Layers Added", "Raster layers have been added to the QGIS project.")
